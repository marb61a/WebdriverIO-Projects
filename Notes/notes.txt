Setup WebdriverIO (WDIO)
    - NPM will need to have been initialise in a project folder by the time WDIO is being installed
    - To install WDIO using the following command
        - npm install --save-dev @wdio/cli
    - Following the installation a config file will have to be generated
        - npx wdio config
        - npx runs npm packages without needing to have paths etc 
    - This will generate a list of options which must be selected through
        - This covers from base url to where the tests will be ran so this will change depending on circumstances of testing

Setup Babel
    - Babel is a JavaScript compiler
        - https://babeljs.io/
    - Babel may need up to 4 packages installed
        - npm install --savve-dev @babel/core @babel/cli @babel/preset-env @babel/register
    - Thene the babel.config.js file will need to be added
        - There are options available for customising project eg test location etc
    
Web Automation testing
Launch Chrome Driver
    - Describe block is a block which holds a set of test steps
    - Change the package.json file to run wdio config file which runs tests
        - "test": "wdio wdio.conf.js"
        - npm run test
    - To avoid seeing node based errors
        - npm run test --silent
    - Errors may occur if chromedriver and installed version of chrome differ
    - Also may need to disable baseUrl in wdio.conf.js if not using a base url

Pausing tests
    - Tests run very quickly so may need pauses to see where issues occur
    - These are called explicit delays and should only be used in setting up tests
    - Implicit delays which are more intelligent should be used instead of explicit
    - Delays are expressed in milliseconds
    - Be careful to use the proper domain name when specifying sites

Assert Title & URL
    - Assertions are used to check whether a value that is returned matches what was expected
    - If urls do not exactly match what is returned then the assertion will fail
    - Uses the tohaveUrl and toHaveTitle commands 

Assert Elements
    - Verifying that elements on the website are visible
    - Uses the toBeVisible command

Assert Links
    - Assert that the value of a link is correct
    - Uses the toHaveLink command

Explicit vs Implicit Waits
    - As said above explicit waits are usually considered bad practice
    - Implicit waits are dynamic unlike explicit which are static 
    - An Implicit command such as waitForExist is used
    - It is recommended to always use the waitForExist command to avoid errors triggered by an element being unavailable

Get Element Text
    - There are 2 ways of getting the element Text
        - Firstly extract the value to a variable for reuse, this uses the getText command
            - Assertion can be used to check that the text is correct using toHaveText

Get Element Attribute
    - Get and assert any value from an element
    - This uses the toHaveAttrContaining command
    - The testcafe site is highly recommended for learning
        - https://devexpress.github.io/testcafe/example/
    - When interacting with an element with an id you will have to use # before a name

Get Element Value
    - Similar to getting an element ettribute
    - This time the toHaveValue is used

Taking Screenshots
    - Using WDIO rather than 3rd party
    - The savescreenShot command is used
    - Always ensure that the path to the folder to save Screenshots is correct
    - By default each time the savescreenShot command is ran it overwrites the existing image

Window Size Setup
    - How to set browser viewport
    - This can be a very useful tool in testing
    - The setWindowSize command is used and takes 2 parameters -> Width and height

Timeout Helpers
    - Timeouts are easy to created
    - They can be set to various lengths 
        - For example short, medium and long timeouts can be created

Device Emulation Helpers
    - There maybe a need for platform specific helper functions
    - Tablets, Mobile and desktop devices have differene screensizes so setting tests especially for these will make for better testing

Browser Actions 
Working With Inputs
    - How to input with interact with input fields
    - To exclude a test from being ran
        - Add the proper path to the file in the exclude section of the wdio.conf.js file
    - Select the input field and input using setValue
Click & Double Click
    - Click an input element (eg Button) using the click() command
    - Double click on the element using the doubleClick() command
Radio Buttons & Checkboxes
    - Both elements will make use of the click() command 
Selectbox
    - You can select from a list of values eg a dropdown list
    - This can be done by selecting certain text using the selectByVisibleText() command

E2E Tests
!! - Some tests may be flaky depending on factors
    - Tests that are passing can fail and the opposite too so will need investigations
!! - To limit the number of concurrent browser instances
    - Change the maxInstances value in the capabilities section of wdio.conf.js
!! - Where possible elminate duplicate or repeat code
    - Refactoring can make tests safer, more efficient and easier to maintain
    - Dragging a dropping a date when fully selected can avoid having multiple actions on a date picker
        - Instead it will just add the value to the input field
        - This trick may not work on all date picker fields
        - There may also be a need to use keys to send an enter to avoid other element obstruction
!! - Changing exclude to stop certain tests running may not be good if there are a large amount of tests
    - There is an option to change the specs section to the file being currently tested
    - This will again need to be changed depending on circumstances
!! - If there is no id on an element then it may be found using partial text match
    - This can be done using *=text_to_be_found

Page Object Model
    - This is a way to abstract automation code into classes
    - This allows for a large amount of code reuse which prevents repetition
    - This is also much more efficient to maintain as changes only have to be made in 1 place
!! - Having the same test in both specs and exclude may cause issues
        - The system will get an error due to a file being ran and not ran at the same time
!! - Keep running tests frequently when making changes
        - It is easier than tracking down issues after lots of changes

!! Prettier
    - Needs to have a .prettierrc file present for configuration

!! HTTP Server
    - Allows for running applications locally
    - Install via npm -> npm install http-server -g
        - Install globally so that it can be ran in multiple projects
    - To run simply go to the project folder where you wish to run from
        - Then type http-server at the prompt

!! Running tests
    - By setting package.json test entry to -> "test": "./node_modules/.bin/wdio"
    - Tests can be ran simply by running npm test wdio.conf.js
    - Again this will run tests listed in the specs section
    - Tests without callback functions will be skipped
        - Also tests with empty callbacks will pass tests
    - The keyword Only can be used on it blocks
        - This means that only the specified block will run the test

!! isDisplayed
    - Displayed can be a tricky concept as it does not mean necessarily visible to the user
    - Displayed means that a component is on the DOM
        - If attributes like hidden or display is set to none then an element maybe 
    - When using overlays then it may be a case of setting hidden to true
        - Needless to say this is not all that practical in the real world for security
    - Position can also affect visibility 
        - Setting far left or right may mean the element is there but cannot be seen
    - Opacity is another factor that affects visibility
        - Elements can be seen on the DOM but are see-through to users

!! Maximize Window
    - Some elements may not display correctly on a reduced size window
    - This means setting either a custom size or maximising the window
        - browser.maximizeWindow()
        - browser.setWindowSize(100, 300)
    - 

